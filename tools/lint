#!/usr/bin/env node

/*
 * Linting tool, using jshint with options from ../jshint.json
 */
 
var isHelp, buffer,
    path = require('path'),
    util = require('util'),
    cp = require('child_process'),
    fileModule = require('file');
    
console.log('');

// Framework path
var rootPath = path.dirname(__filename);

// Config file
var config = path.resolve(rootPath, '../jshint.json');

// Command, using local jshint library
var cmd = path.resolve(rootPath, '../node_modules/jshint/bin/hint'),
    args = process.argv.slice(2).concat(['--config', config]);

// Output colors
var colorRegex = /(\n)?(.*?): line (\d+), (.*?), (.*?)(\n)/g

// Functions
function logger(data) {
  data = data.toString('utf-8');
  isHelp = (data.indexOf('Usage: jshint path path2 [options]') >= 0);
  if (isHelp) {
    console.log(util.format("Usage: %s [ --scan | <file> ] \n", path.basename(process.argv[1])));
    process.exit();
  } else {
    buffer = data;
  }
}

function title(str, success) {
  var prefix = (success) 
  ? '\u001b[0;32m[OK]\u001b[0m' 
  : '\u001b[0;31m[FAIL]\u001b[0m';
  console.log(util.format("%s \u001b[1;30m%s\u001b[0m\n", prefix, str));
}

function colorize(data) {
  data = data.replace(colorRegex, '$1âžœ \u001b[0;30m$2:\u001b[0m\u001b[1;30m$3 \u001b[0;31m$5\u001b[0m$6');
  console.log(data);
}

if (process.argv.indexOf('--scan') >= 0) {
  
  // Process multiple files
  var exclude = /^(node_modules)/,
      p = path.resolve(rootPath, '../'),
      path, files, file, i;
    
  cp.exec("find . | grep '\.js$'", function(err, stdout, stderr) {
    if (err) throw err;
    else {
      files = stdout.replace(/\n?\.\//g, '\n').split('\n');
      for (i=0; i < files.length; i++) {
        file = files[i];
        if (exclude.test(file)) continue;
        console.log(file);
      }
    }
  })
  
} else {
  
  // Run command w/args
  var jshint = cp.spawn(cmd, args);
  jshint.stdout.on('data', logger);
  jshint.on('exit', function(err) {
    if (!isHelp && err === 0) {
      title(args[0], true);
    } else {
      title(args[0], false);
      colorize(buffer);
    }
  });
  
}


